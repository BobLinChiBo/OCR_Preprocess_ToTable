[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ocr-table-extraction"
dynamic = ["version"]
description = "Two-stage OCR preprocessing pipeline for table extraction from scanned academic documents"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "OCR Pipeline Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.8"
dependencies = [
    "opencv-python>=4.8.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "click>=8.0",
    "rich>=12.0",
    "Pillow>=9.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-timeout>=2.1",
    "black>=23.0",
    "isort>=5.12",
    "ruff>=0.1.0",
    "flake8>=6.0",
    "mypy>=1.0",
    "bandit>=1.7",
    "safety>=2.3",
    "pre-commit>=3.0",
]

[project.scripts]
ocr-stage1 = "ocr_pipeline.cli.stage1:main"
ocr-stage2 = "ocr_pipeline.cli.stage2:main"

[tool.setuptools]
packages = ["ocr_pipeline"]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
version = {attr = "ocr_pipeline.__version__"}

# Black code formatting
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = "\\.pyi?$"
extend-exclude = """
/(
  # Directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
"""

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ocr_pipeline"]
known_third_party = ["cv2", "numpy", "scipy", "pydantic", "yaml", "click", "rich", "PIL"]

# Ruff linting
[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "S311"]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "cv2.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU (deselect with '-m \"not gpu\"')",
    "cli: marks tests as CLI tests (deselect with '-m \"not cli\"')",
    "network: marks tests as requiring network access (deselect with '-m \"not network\"')",
    "config: marks tests related to configuration",
    "processors: marks tests related to image processors",
    "pipeline: marks tests related to pipeline execution",
    "requires_windows_utils: marks tests that require Windows utilities",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True (we handle these specifically)

# Additional tool configurations can be added here as needed